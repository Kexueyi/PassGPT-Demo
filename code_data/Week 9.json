[
  {
    "type": "Import",
    "from": "datasets",
    "import": {
      "name": "load_dataset",
      "alias": null
    },
    "start": {
      "line": 15,
      "column": 0
    },
    "end": {
      "line": 15,
      "column": 33
    }
  },
  {
    "type": "Assignment",
    "body": "dataset=load_dataset(\"yelp_review_full\")",
    "start": {
      "line": 17,
      "column": 0
    },
    "end": {
      "line": 17,
      "column": 42
    }
  },
  null,
  {
    "type": "Import",
    "from": "transformers",
    "import": {
      "name": "AutoTokenizer",
      "alias": null
    },
    "start": {
      "line": 26,
      "column": 0
    },
    "end": {
      "line": 26,
      "column": 38
    }
  },
  {
    "type": "Assignment",
    "body": "tokenizer=AutoTokenizer.from_pretrained(\"bert-base-cased\")",
    "start": {
      "line": 28,
      "column": 0
    },
    "end": {
      "line": 28,
      "column": 60
    }
  },
  {
    "type": "Function declaration",
    "body": "deftokenize_function(examples):     returntokenizer(examples[\"text\"],padding=\"max_length\",truncation=True)\n\n",
    "start": {
      "line": 31,
      "column": 0
    },
    "end": {
      "line": 35,
      "column": 1
    }
  },
  {
    "type": "Assignment",
    "body": "tokenized_datasets=dataset.map(tokenize_function,batched=True)",
    "start": {
      "line": 35,
      "column": 0
    },
    "end": {
      "line": 35,
      "column": 65
    }
  },
  {
    "type": "Assignment",
    "body": "small_train_dataset=tokenized_datasets[\"train\"].shuffle(seed=42).select(range(1000))",
    "start": {
      "line": 43,
      "column": 0
    },
    "end": {
      "line": 43,
      "column": 86
    }
  },
  {
    "type": "Assignment",
    "body": "small_eval_dataset=tokenized_datasets[\"test\"].shuffle(seed=42).select(range(1000))",
    "start": {
      "line": 44,
      "column": 0
    },
    "end": {
      "line": 44,
      "column": 84
    }
  },
  {
    "type": "Import",
    "from": "transformers",
    "import": {
      "name": "AutoModelForSequenceClassification",
      "alias": null
    },
    "start": {
      "line": 52,
      "column": 0
    },
    "end": {
      "line": 52,
      "column": 59
    }
  },
  {
    "type": "Assignment",
    "body": "model=AutoModelForSequenceClassification.from_pretrained(\"bert-base-cased\",num_labels=5)",
    "start": {
      "line": 54,
      "column": 0
    },
    "end": {
      "line": 54,
      "column": 91
    }
  },
  {
    "type": "Import",
    "from": "transformers",
    "import": {
      "name": "TrainingArguments",
      "alias": null
    },
    "start": {
      "line": 62,
      "column": 0
    },
    "end": {
      "line": 62,
      "column": 42
    }
  },
  {
    "type": "Assignment",
    "body": "training_args=TrainingArguments(output_dir=\"test_trainer\")",
    "start": {
      "line": 64,
      "column": 0
    },
    "end": {
      "line": 64,
      "column": 60
    }
  },
  {
    "type": "Import",
    "start": {
      "line": 72,
      "column": 0
    },
    "end": {
      "line": 72,
      "column": 18
    },
    "name": "numpy",
    "alias": "np"
  },
  {
    "type": "Import",
    "start": {
      "line": 73,
      "column": 0
    },
    "end": {
      "line": 73,
      "column": 15
    },
    "name": "evaluate",
    "alias": null
  },
  {
    "type": "Assignment",
    "body": "metric=evaluate.load(\"accuracy\")",
    "start": {
      "line": 75,
      "column": 0
    },
    "end": {
      "line": 75,
      "column": 34
    }
  },
  {
    "type": "Function declaration",
    "body": "defcompute_metrics(eval_pred):     logits,labels=eval_pred predictions=np.argmax(logits,axis=-1) returnmetric.compute(predictions=predictions,references=labels)\n\n",
    "start": {
      "line": 83,
      "column": 0
    },
    "end": {
      "line": 94,
      "column": 1
    }
  },
  {
    "type": "Import",
    "from": "transformers",
    "import": [
      {
        "name": "TrainingArguments",
        "alias": null
      },
      {
        "name": "Trainer",
        "alias": null
      }
    ],
    "start": {
      "line": 94,
      "column": 0
    },
    "end": {
      "line": 94,
      "column": 51
    }
  },
  {
    "type": "Assignment",
    "body": "training_args=TrainingArguments(output_dir=\"test_trainer\",evaluation_strategy=\"epoch\")",
    "start": {
      "line": 96,
      "column": 0
    },
    "end": {
      "line": 97,
      "column": 62
    }
  },
  {
    "type": "Assignment",
    "body": "trainer=Trainer(model=model,args=training_args,train_dataset=small_train_dataset,eval_dataset=small_eval_dataset,compute_metrics=compute_metrics,)",
    "start": {
      "line": 99,
      "column": 0
    },
    "end": {
      "line": 105,
      "column": 1
    }
  },
  {
    "type": "Function call",
    "name": "trainer.train",
    "arguments": "()",
    "start": {
      "line": 111,
      "column": 0
    },
    "end": {
      "line": 111,
      "column": 15
    }
  },
  {
    "type": "Import",
    "start": {
      "line": 119,
      "column": 0
    },
    "end": {
      "line": 119,
      "column": 12
    },
    "name": "torch",
    "alias": null
  },
  {
    "type": "Import",
    "from": "transformers",
    "import": [
      {
        "name": "RobertaTokenizerFast",
        "alias": null
      },
      {
        "name": "RobertaForSequenceClassification",
        "alias": null
      },
      {
        "name": "TrainingArguments",
        "alias": null
      },
      {
        "name": "Trainer",
        "alias": null
      },
      {
        "name": "AutoConfig",
        "alias": null
      }
    ],
    "start": {
      "line": 120,
      "column": 0
    },
    "end": {
      "line": 126,
      "column": 1
    }
  },
  {
    "type": "Import",
    "from": "huggingface_hub",
    "import": [
      {
        "name": "HfFolder",
        "alias": null
      },
      {
        "name": "notebook_login",
        "alias": null
      }
    ],
    "start": {
      "line": 127,
      "column": 0
    },
    "end": {
      "line": 127,
      "column": 52
    }
  },
  {
    "type": "Assignment",
    "body": "model_id=\"roberta-base\"",
    "start": {
      "line": 133,
      "column": 0
    },
    "end": {
      "line": 133,
      "column": 25
    }
  },
  {
    "type": "Assignment",
    "body": "dataset_id=\"ag_news\"",
    "start": {
      "line": 134,
      "column": 0
    },
    "end": {
      "line": 134,
      "column": 22
    }
  },
  {
    "type": "Import",
    "from": "datasets",
    "import": {
      "name": "load_dataset",
      "alias": null
    },
    "start": {
      "line": 140,
      "column": 0
    },
    "end": {
      "line": 140,
      "column": 33
    }
  },
  {
    "type": "Assignment",
    "body": "dataset=load_dataset(dataset_id)",
    "start": {
      "line": 142,
      "column": 0
    },
    "end": {
      "line": 142,
      "column": 34
    }
  },
  {
    "type": "Assignment",
    "body": "train_dataset=dataset['train']",
    "start": {
      "line": 145,
      "column": 0
    },
    "end": {
      "line": 145,
      "column": 32
    }
  },
  {
    "type": "Assignment",
    "body": "test_dataset=dataset[\"test\"].shard(num_shards=2,index=0)",
    "start": {
      "line": 146,
      "column": 0
    },
    "end": {
      "line": 146,
      "column": 59
    }
  },
  {
    "type": "Assignment",
    "body": "val_dataset=dataset['test'].shard(num_shards=2,index=1)",
    "start": {
      "line": 149,
      "column": 0
    },
    "end": {
      "line": 149,
      "column": 58
    }
  },
  {
    "type": "Assignment",
    "body": "tokenizer=RobertaTokenizerFast.from_pretrained(model_id)",
    "start": {
      "line": 152,
      "column": 0
    },
    "end": {
      "line": 152,
      "column": 58
    }
  },
  {
    "type": "Function declaration",
    "body": "deftokenize(batch):     returntokenizer(batch[\"text\"],padding=True,truncation=True,max_length=256)\n\n",
    "start": {
      "line": 156,
      "column": 0
    },
    "end": {
      "line": 159,
      "column": 1
    }
  },
  {
    "type": "Assignment",
    "body": "train_dataset=train_dataset.map(tokenize,batched=True,batch_size=len(train_dataset))",
    "start": {
      "line": 159,
      "column": 0
    },
    "end": {
      "line": 159,
      "column": 88
    }
  },
  {
    "type": "Assignment",
    "body": "val_dataset=val_dataset.map(tokenize,batched=True,batch_size=len(val_dataset))",
    "start": {
      "line": 160,
      "column": 0
    },
    "end": {
      "line": 160,
      "column": 82
    }
  },
  {
    "type": "Assignment",
    "body": "test_dataset=test_dataset.map(tokenize,batched=True,batch_size=len(test_dataset))",
    "start": {
      "line": 161,
      "column": 0
    },
    "end": {
      "line": 161,
      "column": 85
    }
  },
  {
    "type": "Function call",
    "name": "train_dataset.set_format",
    "arguments": "(\"torch\",columns=[\"input_ids\",\"attention_mask\",\"label\"])",
    "start": {
      "line": 168,
      "column": 0
    },
    "end": {
      "line": 168,
      "column": 83
    }
  },
  {
    "type": "Function call",
    "name": "val_dataset.set_format",
    "arguments": "(\"torch\",columns=[\"input_ids\",\"attention_mask\",\"label\"])",
    "start": {
      "line": 169,
      "column": 0
    },
    "end": {
      "line": 169,
      "column": 81
    }
  },
  {
    "type": "Function call",
    "name": "test_dataset.set_format",
    "arguments": "(\"torch\",columns=[\"input_ids\",\"attention_mask\",\"label\"])",
    "start": {
      "line": 170,
      "column": 0
    },
    "end": {
      "line": 170,
      "column": 82
    }
  },
  {
    "type": "Assignment",
    "body": "num_labels=dataset['train'].features['label'].num_classes",
    "start": {
      "line": 178,
      "column": 0
    },
    "end": {
      "line": 178,
      "column": 59
    }
  },
  {
    "type": "Assignment",
    "body": "class_names=dataset[\"train\"].features[\"label\"].names",
    "start": {
      "line": 179,
      "column": 0
    },
    "end": {
      "line": 179,
      "column": 54
    }
  },
  {
    "type": "Function call",
    "name": "print",
    "arguments": "(f\"number of labels: {num_labels}\")",
    "start": {
      "line": 180,
      "column": 0
    },
    "end": {
      "line": 180,
      "column": 40
    }
  },
  {
    "type": "Function call",
    "name": "print",
    "arguments": "(f\"the labels: {class_names}\")",
    "start": {
      "line": 181,
      "column": 0
    },
    "end": {
      "line": 181,
      "column": 35
    }
  },
  {
    "type": "Assignment",
    "body": "id2label={i:labelfori,labelinenumerate(class_names)}",
    "start": {
      "line": 184,
      "column": 0
    },
    "end": {
      "line": 184,
      "column": 60
    }
  },
  {
    "type": "Assignment",
    "body": "config=AutoConfig.from_pretrained(model_id)",
    "start": {
      "line": 187,
      "column": 0
    },
    "end": {
      "line": 187,
      "column": 45
    }
  },
  {
    "type": "Function call",
    "name": "config.update",
    "arguments": "({\"id2label\":id2label})",
    "start": {
      "line": 188,
      "column": 0
    },
    "end": {
      "line": 188,
      "column": 37
    }
  },
  {
    "type": "Assignment",
    "body": "training_args=TrainingArguments(output_dir=\"test_trainer\",num_train_epochs=5,per_device_train_batch_size=8,per_device_eval_batch_size=8,evaluation_strategy=\"epoch\",learning_rate=5e-5,weight_decay=0.01,warmup_steps=500,)",
    "start": {
      "line": 195,
      "column": 0
    },
    "end": {
      "line": 204,
      "column": 1
    }
  },
  {
    "type": "Assignment",
    "body": "model=RobertaForSequenceClassification.from_pretrained(model_id,config=config)",
    "start": {
      "line": 207,
      "column": 0
    },
    "end": {
      "line": 207,
      "column": 81
    }
  },
  {
    "type": "Assignment",
    "body": "trainer=Trainer(model=model,args=training_args,train_dataset=train_dataset,eval_dataset=val_dataset,)",
    "start": {
      "line": 210,
      "column": 0
    },
    "end": {
      "line": 215,
      "column": 1
    }
  },
  {
    "type": "Function call",
    "name": "trainer.train",
    "arguments": "()",
    "start": {
      "line": 224,
      "column": 0
    },
    "end": {
      "line": 224,
      "column": 15
    }
  },
  {
    "type": "Function call",
    "name": "trainer.evaluate",
    "arguments": "()",
    "start": {
      "line": 231,
      "column": 0
    },
    "end": {
      "line": 231,
      "column": 18
    }
  }
]